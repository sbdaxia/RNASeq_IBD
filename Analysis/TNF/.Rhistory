for (i in 1:dim(filter_dat)[1]) {
filter_dat[i,1:16] <- zscore(as.numeric(filter_dat[i,1:16]))
}
my_palette <- colorRampPalette(c("blue", "white", "red"))(128)
heatmap_matrix <- as.matrix(filter_dat[,1:16])
png('Top 5000 variance.png',
width = 1000,
height = 1200,
res = 200,
pointsize = 8)
heatmap.2(heatmap_matrix,
main = "Top 5000 variance",
density.info = "none",
key = TRUE,
lhei = c(1,7),
col=my_palette,
cexCol = 1,
margins = c(8,2),
trace = "none",
dendrogram = "row",
labRow = FALSE,
keysize = 2,
ylab = "Genes",
Colv = "NA")
dev.off()
pdf('Top 5000 variance.pdf',
width = 8,
height = 10)
heatmap.2(heatmap_matrix,
main = "Top 5000 variance",
density.info = "none",
key = TRUE,
lhei = c(1,7),
col=my_palette,
cexCol = 1,
margins = c(8,2),
trace = "none",
dendrogram = "row",
labRow = FALSE,
keysize = 2,
ylab = "Genes",
Colv = "NA")
dev.off()
include_graphics('Top 5000 variance.png')
row_clust <- hclust(dist(filter_dat, method = 'euclidean'), method = 'ward.D2')
plot(row_clust, labels = FALSE)
abline(h = 45, col = "red")
row_clust <- hclust(dist(filter_dat, method = 'euclidean'), method = 'ward.D2')
plot(row_clust, labels = FALSE)
abline(h = 40, col = "red")
plot(row_clust, labels = FALSE)
abline(h = 38, col = "red")
plot(row_clust, labels = FALSE)
abline(h = 36, col = "red")
plot(row_clust, labels = FALSE)
abline(h = 34, col = "red")
plot(row_clust, labels = FALSE)
abline(h = 33, col = "red")
plot(row_clust, labels = FALSE)
abline(h = 34, col = "red")
# seperate clusters
h = 34
clusters <- cutree(row_clust, h = h)
# number of distinct cluster we get
length(unique(clusters))
# seperate clusters
h = 34
clusters <- cutree(row_clust, h = h)
# number of distinct cluster we get
length(unique(clusters))
# generate of list of genes for the 10 clusters
genecluster <- function(n) {
index <- which(clusters == n)
row_clust$labels[index]
}
cluster_gene <- lapply(1:length(unique(clusters)), genecluster)
names(cluster_gene) <- paste("cluster", c(1:length(unique(clusters))))
View(cluster_gene)
trend_plot <- function(a) {
gene_list <- a
cluster_data <- filter_dat[gene_list,]
suppressMessages(df <- melt(cluster_data, variable_name = "Samples"))
df <- data.frame(df, Condition = substr(df$Samples,1,4))
ggplot(df, aes(x=Samples, y=value, fill = Condition)) + geom_boxplot() + xlab("") +
ylab("Z-scored gene expression") + scale_fill_manual(values = c("#619CFF", "#F564E3", "#E69F00")) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ggtitle(names(gene_list))
}
lapply(cluster_gene, trend_plot)
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(
c(library(ggplot2),
library(mixOmics),
library(gplots),
library(RColorBrewer),
library(readr),
library(dplyr),
library(tidyverse),
library(knitr),
library(rafalib),
library(reshape))
)
VST_TNF <- read_csv("VST_TNF.csv")
dat <- as.data.frame(VST_TNF[, c(18:22, 8:12, 2:7)])
rownames(dat) <- VST_TNF$X1
# calculate row variance
row_var <- apply(dat, 1, var)
filter_dat <- dat[order(-row_var)[1:5000],]
# Plot the heatmap
suppressMessages(library(mosaic))
for (i in 1:dim(filter_dat)[1]) {
filter_dat[i,1:16] <- zscore(as.numeric(filter_dat[i,1:16]))
}
my_palette <- colorRampPalette(c("blue", "white", "red"))(128)
heatmap_matrix <- as.matrix(filter_dat[,1:16])
png('Top 5000 variance.png',
width = 1000,
height = 1200,
res = 200,
pointsize = 8)
heatmap.2(heatmap_matrix,
main = "Top 5000 variance",
density.info = "none",
key = TRUE,
lhei = c(1,7),
col=my_palette,
cexCol = 1,
margins = c(8,2),
trace = "none",
dendrogram = "row",
labRow = FALSE,
keysize = 2,
ylab = "Genes",
Colv = "NA")
dev.off()
pdf('Top 5000 variance.pdf',
width = 8,
height = 10)
heatmap.2(heatmap_matrix,
main = "Top 5000 variance",
density.info = "none",
key = TRUE,
lhei = c(1,7),
col=my_palette,
cexCol = 1,
margins = c(8,2),
trace = "none",
dendrogram = "row",
labRow = FALSE,
keysize = 2,
ylab = "Genes",
Colv = "NA")
dev.off()
include_graphics('Top 5000 variance.png')
row_clust <- hclust(dist(filter_dat, method = 'euclidean'), method = 'ward.D2')
plot(row_clust, labels = FALSE)
abline(h = 34, col = "red")
# seperate clusters
h = 34
clusters <- cutree(row_clust, h = h)
# number of distinct cluster we get
length(unique(clusters))
# generate of list of genes for the 10 clusters
genecluster <- function(n) {
index <- which(clusters == n)
row_clust$labels[index]
}
cluster_gene <- lapply(1:length(unique(clusters)), genecluster)
names(cluster_gene) <- paste("cluster", c(1:length(unique(clusters))))
trend_plot <- function(a) {
gene_list <- a
cluster_data <- filter_dat[gene_list,]
suppressMessages(df <- melt(cluster_data, variable_name = "Samples"))
df <- data.frame(df, Condition = substr(df$Samples,1,4))
ggplot(df, aes(x=Samples, y=value, fill = Condition)) + geom_boxplot() + xlab("") +
ylab("Z-scored gene expression") + scale_fill_manual(values = c("#619CFF", "#F564E3", "#E69F00")) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ggtitle(names(gene_list))
heatmap_matrix <- as.matrix(cluster_data[,1:16])
heatmap.2(heatmap_matrix,
main = "Top 5000 variance",
density.info = "none",
key = TRUE,
lhei = c(1,7),
col=my_palette,
cexCol = 1,
margins = c(8,2),
trace = "none",
dendrogram = "row",
labRow = FALSE,
keysize = 2,
ylab = "Genes",
Colv = "NA")
}
lapply(cluster_gene, trend_plot)
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(
c(library(ggplot2),
library(mixOmics),
library(gplots),
library(RColorBrewer),
library(readr),
library(dplyr),
library(tidyverse),
library(knitr),
library(rafalib),
library(reshape))
)
VST_TNF <- read_csv("VST_TNF.csv")
dat <- as.data.frame(VST_TNF[, c(18:22, 8:12, 2:7)])
rownames(dat) <- VST_TNF$X1
# calculate row variance
row_var <- apply(dat, 1, var)
filter_dat <- dat[order(-row_var)[1:5000],]
# Plot the heatmap
suppressMessages(library(mosaic))
for (i in 1:dim(filter_dat)[1]) {
filter_dat[i,1:16] <- zscore(as.numeric(filter_dat[i,1:16]))
}
my_palette <- colorRampPalette(c("blue", "white", "red"))(128)
heatmap_matrix <- as.matrix(filter_dat[,1:16])
png('Top 5000 variance.png',
width = 1000,
height = 1200,
res = 200,
pointsize = 8)
heatmap.2(heatmap_matrix,
main = "Top 5000 variance",
density.info = "none",
key = TRUE,
lhei = c(1,7),
col=my_palette,
cexCol = 1,
margins = c(8,2),
trace = "none",
dendrogram = "row",
labRow = FALSE,
keysize = 2,
ylab = "Genes",
Colv = "NA")
dev.off()
pdf('Top 5000 variance.pdf',
width = 8,
height = 10)
heatmap.2(heatmap_matrix,
main = "Top 5000 variance",
density.info = "none",
key = TRUE,
lhei = c(1,7),
col=my_palette,
cexCol = 1,
margins = c(8,2),
trace = "none",
dendrogram = "row",
labRow = FALSE,
keysize = 2,
ylab = "Genes",
Colv = "NA")
dev.off()
include_graphics('Top 5000 variance.png')
row_clust <- hclust(dist(filter_dat, method = 'euclidean'), method = 'ward.D2')
plot(row_clust, labels = FALSE)
abline(h = 34, col = "red")
# seperate clusters
h = 34
clusters <- cutree(row_clust, h = h)
# number of distinct cluster we get
length(unique(clusters))
# generate of list of genes for the 10 clusters
genecluster <- function(n) {
index <- which(clusters == n)
row_clust$labels[index]
}
cluster_gene <- lapply(1:length(unique(clusters)), genecluster)
names(cluster_gene) <- paste("cluster", c(1:length(unique(clusters))))
cluster_boxplot <- function(a) {
# plot the boxplots
gene_list <- cluster_gene[[a]]
cluster_data <- filter_dat[gene_list,]
suppressMessages(df <- melt(cluster_data, variable_name = "Samples"))
df <- data.frame(df, Condition = substr(df$Samples,1,4))
ggplot(df, aes(x=Samples, y=value, fill = Condition)) + geom_boxplot() + xlab("") +
ylab("Z-scored gene expression") + scale_fill_manual(values = c("#619CFF", "#F564E3", "#E69F00")) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ggtitle(names(cluster_gene)[a])
}
lapply(1:11, cluster_boxplot)
cluster_heatmap <- function(a) {
gene_list <- cluster_gene[[a]]
# plot the heatmap
heatmap_matrix <- as.matrix(filter_dat[gene_list,])
png(paste(names(cluster_gene)[a], "heatmap.png"),
width = 800,
height = 1000,
res = 150,
pointsize = 8)
heatmap.2(heatmap_matrix,
main = paste(names(cluster_gene)[a], "heatmap"),
density.info = "none",
key = TRUE,
lhei = c(1,7),
col=my_palette,
cexCol = 1,
margins = c(8,2),
trace = "none",
dendrogram = "row",
labRow = FALSE,
keysize = 2,
ylab = "Genes",
Colv = "NA")
dev.off()
}
lapply(1:11, cluster_heatmap)
include_graphics("cluster 1 heatmap.png")
include_graphics("cluster 2 heatmap.png")
include_graphics("cluster 3 heatmap.png")
include_graphics("cluster 4 heatmap.png")
include_graphics("cluster 5 heatmap.png")
include_graphics("cluster 6 heatmap.png")
include_graphics("cluster 7 heatmap.png")
include_graphics("cluster 8 heatmap.png")
include_graphics("cluster 9 heatmap.png")
include_graphics("cluster 10 heatmap.png")
include_graphics("cluster 11 heatmap.png")
suppressMessages(
c(library(ggplot2),
library(mixOmics),
library(gplots),
library(RColorBrewer),
library(readr),
library(dplyr),
library(tidyverse),
library(knitr),
library(rafalib),
library(reshape),
library(clusterprofiler),
library(org.Mm.eg.db),
library(AnnotationDbi))
)
suppressMessages(
c(library(ggplot2),
library(mixOmics),
library(gplots),
library(RColorBrewer),
library(readr),
library(dplyr),
library(tidyverse),
library(knitr),
library(rafalib),
library(reshape),
library(clusterprofiler),
library(org.Mm.eg.db),
library(AnnotationDbi))
)
library(clusterProfiler)
suppressMessages(
c(library(ggplot2),
library(mixOmics),
library(gplots),
library(RColorBrewer),
library(readr),
library(dplyr),
library(tidyverse),
library(knitr),
library(rafalib),
library(reshape),
library(clusterProfiler),
library(org.Mm.eg.db),
library(AnnotationDbi))
)
suppressMessages(
c(library(ggplot2),
library(mixOmics),
library(gplots),
library(RColorBrewer),
library(readr),
library(dplyr),
library(tidyverse),
library(knitr),
library(rafalib),
library(reshape),
library(clusterProfiler),
library(EnsDb.Mmusculus.v79),
library(ensembldb),
library(AnnotationDbi))
)
# Convert Ensembl ID to Entrez ID
## cluster 4
target_gene <- cluster[[4]]
# Convert Ensembl ID to Entrez ID
## cluster 4
target_gene <- cluster_gene[[4]]
annotations_entrez <- AnnotationDbi::select(EnsDb.Mmusculus.v79,
keys = target_gene,
columns = c("ENTREZID"),
keytype = "GENEID")
target_gene_entrez <- as.character(unique(annotations_entrez$ENTREZID[!is.na(annotations_entrez$ENTREZID)]))
suppressMessages(
c(library(ggplot2),
library(mixOmics),
library(gplots),
library(RColorBrewer),
library(readr),
library(dplyr),
library(tidyverse),
library(knitr),
library(rafalib),
library(reshape),
library(clusterProfiler),
library(org.Mm.eg.db),
library(AnnotationDbi))
)
suppressMessages(
c(library(ggplot2),
library(mixOmics),
library(gplots),
library(RColorBrewer),
library(readr),
library(dplyr),
library(tidyverse),
library(knitr),
library(rafalib),
library(reshape),
library(clusterProfiler),
library(org.Mm.eg.db),
library(AnnotationDbi))
)
keytypes(org.Mm.eg.db)
# Convert Ensembl ID to Entrez ID
## cluster 4
target_gene <- cluster_gene[[4]]
annotations_entrez <- AnnotationDbi::select(org.Mm.eg.db,
keys = target_gene,
columns = c("ENTREZID"),
keytype = "ENSEMBL")
target_gene_entrez <- as.character(unique(annotations_entrez$ENTREZID[!is.na(annotations_entrez$ENTREZID)]))
# Convert Ensembl ID to Entrez ID
detected_gene <- rownames(filter_dat)
# Convert Ensembl ID to Entrez ID
detected_gene <- rownames(filter_dat)
annotations_entrez <- AnnotationDbi::select(org.Mm.eg.db,
keys = detected_gene,
columns = c("ENTREZID"),
keytype = "ENSEMBL")
detected_gene_entrez <- as.character(unique(annotations_entrez$ENTREZID[!is.na(annotations_entrez$ENTREZID)]))
kk <- enrichKEGG(gene = target_gene_entrez, universe = detected_gene_entrez, organism = 'mmu')
View(kk)
write.csv(as.data.frame(kk), "KEGG analysis/KEGG_cluster 4.csv")
dotplot(kk, showCategory = 20)
names(cluster_gene)
dotplot(kk, showCategory = 20) + labs(title = names(cluster_gene)[4])
dotplot(kk, showCategory = 20) + labs(paste("KEGG for genes in" title = names(cluster_gene)[4]))
dotplot(kk, showCategory = 20) + labs(paste("KEGG for genes in", title = names(cluster_gene)[4]))
dotplot(kk, showCategory = 20) + labs(paste("KEGG for genes in", title = names(cluster_gene)[4]))
paste("KEGG for genes in", title = names(cluster_gene)[4])
dotplot(kk, showCategory = 20) + labs(paste("KEGG for genes in", title = names(cluster_gene)[4]))
dotplot(kk, showCategory = 20) + labs(title = paste("KEGG for genes in", names(cluster_gene)[4]))
dotplot(kk, showCategory = 20) + labs(title = paste("Enriched KEGG for genes in", names(cluster_gene)[4]))
paste("KEGG for genes in", title = names(cluster_gene)[4])
i <- 4
paste("KEGG analysis/KEGG_cluster ", i, ".csv", sep = "")
sapply(c(4,11,7,8), function(i) {
target_gene <- cluster_gene[[i]]
annotations_entrez <- AnnotationDbi::select(org.Mm.eg.db,
keys = target_gene,
columns = c("ENTREZID"),
keytype = "ENSEMBL")
target_gene_entrez <- as.character(unique(annotations_entrez$ENTREZID[!is.na(annotations_entrez$ENTREZID)]))
kk <- enrichKEGG(gene = target_gene_entrez, universe = detected_gene_entrez, organism = 'mmu')
write.csv(as.data.frame(kk), paste("KEGG analysis/KEGG_cluster ", i, ".csv", sep = ""))
dotplot(kk, showCategory = 20) + labs(title = paste("KEGG for genes in", names(cluster_gene)[i]))
})
i <- 4
target_gene <- cluster_gene[[i]]
annotations_entrez <- AnnotationDbi::select(org.Mm.eg.db,
keys = target_gene,
columns = c("ENTREZID"),
keytype = "ENSEMBL")
target_gene_entrez <- as.character(unique(annotations_entrez$ENTREZID[!is.na(annotations_entrez$ENTREZID)]))
kk <- enrichKEGG(gene = target_gene_entrez, universe = detected_gene_entrez, organism = 'mmu')
write.csv(as.data.frame(kk), paste("KEGG analysis/KEGG_cluster ", i, ".csv", sep = ""))
dotplot(kk, showCategory = 20) + labs(title = paste("KEGG for genes in", names(cluster_gene)[i]))
## for each cluster
lapply(c(4,11,7,8), function(i) {
target_gene <- cluster_gene[[i]]
annotations_entrez <- AnnotationDbi::select(org.Mm.eg.db,
keys = target_gene,
columns = c("ENTREZID"),
keytype = "ENSEMBL")
target_gene_entrez <- as.character(unique(annotations_entrez$ENTREZID[!is.na(annotations_entrez$ENTREZID)]))
kk <- enrichKEGG(gene = target_gene_entrez, universe = detected_gene_entrez, organism = 'mmu')
write.csv(as.data.frame(kk), paste("KEGG analysis/KEGG_cluster ", i, ".csv", sep = ""))
dotplot(kk, showCategory = 20) + labs(title = paste("KEGG for genes in", names(cluster_gene)[i]))
})
## for each cluster
sapply(c(4,11,7,8), function(i) {
target_gene <- cluster_gene[[i]]
annotations_entrez <- AnnotationDbi::select(org.Mm.eg.db,
keys = target_gene,
columns = c("ENTREZID"),
keytype = "ENSEMBL")
target_gene_entrez <- as.character(unique(annotations_entrez$ENTREZID[!is.na(annotations_entrez$ENTREZID)]))
kk <- enrichKEGG(gene = target_gene_entrez, universe = detected_gene_entrez, organism = 'mmu')
write.csv(as.data.frame(kk), paste("KEGG analysis/KEGG_cluster ", i, ".csv", sep = ""))
dotplot(kk, showCategory = 20) + labs(title = paste("KEGG for genes in", names(cluster_gene)[i]))
})
## for each cluster
lapply(c(4,11,7,8), function(i) {
target_gene <- cluster_gene[[i]]
annotations_entrez <- AnnotationDbi::select(org.Mm.eg.db,
keys = target_gene,
columns = c("ENTREZID"),
keytype = "ENSEMBL")
target_gene_entrez <- as.character(unique(annotations_entrez$ENTREZID[!is.na(annotations_entrez$ENTREZID)]))
kk <- enrichKEGG(gene = target_gene_entrez, universe = detected_gene_entrez, organism = 'mmu')
write.csv(as.data.frame(kk), paste("KEGG analysis/KEGG_cluster ", i, ".csv", sep = ""))
dotplot(kk, showCategory = 20) + labs(title = paste("KEGG for genes in", names(cluster_gene)[i]))
})
