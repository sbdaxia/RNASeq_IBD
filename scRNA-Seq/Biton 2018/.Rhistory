width = 20,
height = 15)
FeaturePlot(object = seurat,
features = c("HALLMARK_ALLOGRAFT_REJECTION", "HALLMARK_INTERFERON_GAMMA_RESPONSE", "HALLMARK_IL6_JAK_STAT3_SIGNALING", "HALLMARK_INTERFERON_ALPHA_RESPONSE", "HALLMARK_INFLAMMATORY_RESPONSE", "HALLMARK_TNFA_SIGNALING_VIA_NFKB", "HALLMARK_COMPLEMENT", "HALLMARK_IL2_STAT5_SIGNALING"),
order = TRUE,
min.cutoff = 'q10',
label = FALSE,
repel = TRUE,
ncol = 3)
dev.off()
FeaturePlot(object = seurat,
features = c("HALLMARK_MTORC1_SIGNALING", "HALLMARK_PI3K_AKT_MTOR_SIGNALING", "HALLMARK_MYC_TARGETS_V1", "HALLMARK_MYC_TARGETS_V2", "HALLMARK_KRAS_SIGNALING_DN"),
order = TRUE,
min.cutoff = 'q10',
label = FALSE,
repel = TRUE,
ncol = 3)
pdf('Figure/GSVA_TCT-specific.pdf',
width = 20,
height = 10)
FeaturePlot(object = seurat,
features = c("HALLMARK_MTORC1_SIGNALING", "HALLMARK_PI3K_AKT_MTOR_SIGNALING", "HALLMARK_MYC_TARGETS_V1", "HALLMARK_MYC_TARGETS_V2", "HALLMARK_KRAS_SIGNALING_DN"),
order = TRUE,
min.cutoff = 'q10',
label = FALSE,
repel = TRUE,
ncol = 3)
dev.off()
# creat a new annotation column for inflammatory monocytes and all other cells
seurat@meta.data$inf.monocyte <- "other cells"
seurat@meta.data$inf.monocyte[grep("Inflammatory Monocytes", seurat@meta.data$orig.annotation)] <- "Inflammatory Monocytes"
Idents(object = seurat) <- "inf.monocyte"
# violin plot
VlnPlot(object = seurat,
features = c("HALLMARK_MTORC1_SIGNALING"),
pt.size = 0) + geom_boxplot(width = 0.1)
pdf('Figure/GSVA_mTORC1_violin.pdf',
width = 10,
height = 7)
VlnPlot(object = seurat,
features = c("HALLMARK_MTORC1_SIGNALING"),
pt.size = 0) + geom_boxplot(width = 0.1)
dev.off()
# Stats
NES <-  seurat@meta.data$HALLMARK_MTORC1_SIGNALING
NES_inf_mono <- NES[grep("Inflammatory Monocytes", seurat@meta.data$orig.annotation)]
NES_other <- NES[-grep("Inflammatory Monocytes", seurat@meta.data$orig.annotation)]
## check if NES is normally distributed
qqnorm(NES); qqline(NES)
## data is relatively normal, but I am using a non-parametric method here just to be safe
stats::wilcox.test(NES_inf_mono, NES_other, alternative = c("greater"), paired = FALSE)
# violin plot
VlnPlot(object = seurat,
features = c("HALLMARK_PI3K_AKT_MTOR_SIGNALING"),
pt.size = 0) + geom_boxplot(width = 0.1)
pdf('Figure/GSVA_PI3K_mTOR_violin.pdf',
width = 10,
height = 7)
VlnPlot(object = seurat,
features = c("HALLMARK_PI3K_AKT_MTOR_SIGNALING"),
pt.size = 0) + geom_boxplot(width = 0.1)
dev.off()
# Stats
NES <-  seurat@meta.data$HALLMARK_PI3K_AKT_MTOR_SIGNALING
NES_inf_mono <- NES[grep("Inflammatory Monocytes", seurat@meta.data$orig.annotation)]
NES_other <- NES[-grep("Inflammatory Monocytes", seurat@meta.data$orig.annotation)]
## check if NES is normally distributed
qqnorm(NES); qqline(NES)
## data is relatively normal, but I am using a non-parametric method here just to be safe
stats::wilcox.test(NES_inf_mono, NES_other, alternative = c("greater"), paired = FALSE)
FeaturePlot(object = seurat,
features = c("HALLMARK_EPITHELIAL_MESENCHYMAL_TRANSITION", "HALLMARK_APICAL_JUNCTION", "HALLMARK_PROTEIN_SECRETION", "HALLMARK_ANDROGEN_RESPONSE", "HALLMARK_P53_PATHWAY"),
order = TRUE,
min.cutoff = 'q10',
label = FALSE,
repel = TRUE,
ncol = 3)
dim(seurat@meta.data)
counts <- seurat@assays$RNA@counts
counts_df <- as.data.frame(counts)
sum(counts_df == 0)
is.na(counts_df) <- counts_df == 0
sum(is.na(counts_df))
gene_metadata <- as.data.frame(cbind(rownames(counts_df), rowMeans(counts_df, na.rm = TRUE), rowSums(!is.na(counts_df))/dim(counts_df)[2]))
gene_metadata$V1 <- NULL
colnames(gene_metadata) <- c("mean_expression", "detection_freq")
# index the gene list of interest to get their coord on the 2-D space
gene_index <- match(features, rownames(gene_metadata))
# remove NA
gene_index <- gene_index[!is.na(gene_index)]
feature_df <- gene_metadata[gene_index,]
other_df <- gene_metadata[-gene_index,]
# find 10n nearest neighbor of these features in the background list
bg.gene <- nn2(other_df, feature_df, k = 10)
bg.gene.index <- unique(as.vector(bg.gene$nn.idx))
bg.gene.df <- other_df[bg.gene.index,]
# now we have the gene signature of interest and the background gene list
# signature score for each cell is the mean expression of the signature genes minus the mean expression of the background genes
bg.index <- match(rownames(bg.gene.df), rownames(counts_df))
sig.df <- counts_df[gene_index, ]
sig.score <- colMeans(sig.df) - colMeans(bg.df)
sig.df <- counts_df[gene_index, ]
bg.df <- counts_df[bg.index,]
sig.score <- colMeans(sig.df) - colMeans(bg.df)
seurat@meta.data$"mTOR_leading_edge_sig_score" <- sig.score
FeaturePlot(object = seurat,
features = c("mTOR_leading_edge_sig_score"),
order = TRUE,
min.cutoff = 'q10',
label = FALSE,
repel = TRUE)
FeaturePlot(object = seurat,
features = c("mTOR_leading_edge_sig_score"),
order = TRUE,
min.cutoff = 'q10',
label = FALSE,
repel = TRUE,
na.rm = TRUE)
sig.score
sig.score <- colMeans(sig.df, na.rm = TRUE) - colMeans(bg.df, na.rm = TRUE)
sig.score
seurat@meta.data$"mTOR_leading_edge_sig_score" <- sig.score
FeaturePlot(object = seurat,
features = c("mTOR_leading_edge_sig_score"),
order = TRUE,
min.cutoff = 'q10',
label = FALSE,
repel = TRUE)
sum(is.na(seurat@meta.data$"mTOR_leading_edge_sig_score"))
View(feature_df)
View(gene_metadata)
ggplot(gene_metadata, aes(x = mean_expression, y = detection_freq)) + geom_point()
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(
c(library(scater),
library(Seurat),
library(tidyverse),
library(cowplot),
library(Matrix.utils),
library(edgeR),
library(dplyr),
library(magrittr),
library(Matrix),
library(purrr),
library(reshape2),
library(S4Vectors),
library(tibble),
library(SingleCellExperiment),
library(pheatmap),
library(apeglm),
library(png),
library(DESeq2),
library(RColorBrewer),
library(mixOmics),
library(knitr),
library(mosaic),
library(gplots),
library(clusterProfiler),
library(gridExtra),
library(GSVA),
library(RANN))
)
# Bring in Seurat object
seurat <- readRDS('Results/seurat_labelled.rds')
# Extract raw counts and metadata to create SingleCellExperiment object
counts <- seurat@assays$RNA@counts
metadata <- seurat@meta.data
# Set up metadata as desired for aggregation and DE analysis
metadata$cluster_id <- factor(seurat@active.ident)
# Create single cell experiment object
sce <- SingleCellExperiment(assays = list(counts = counts),
colData = metadata)
pdf('Figure/cell_cluster.pdf',
width = 10,
height = 7)
DimPlot(seurat,
reduction = "umap",
label = TRUE,
label.size = 4,
repel = TRUE)
dev.off()
pdf('Figure/cell_cluster_by_condition.pdf',
width = 12,
height = 7)
DimPlot(seurat,
reduction = "umap",
label = TRUE,
label.size = 4,
repel = TRUE,
split.by = "condition") + NoLegend()
dev.off()
View(metadata)
# Checj the number of cells from each sample in each cluster
options(width = 100)
table(sce$cluster_id, sce$sample)
cell_distribution <- as.data.frame.matrix(table(sce$cluster_id, sce$sample))
total_num <- colSums(cell_distribution)
df <- melt(as.matrix(cell_distribution), value.name = "cell_num")
df$Var1 <- factor(df$Var1)
colnames(df)[1:2] <- c("Cell_Type", "Sample")
ggplot(df, aes(x =  Sample, y = cell_num, fill = Cell_Type)) +
geom_bar(position = "fill", stat="identity") + ggtitle("Cell Number Distribution")
pdf('Figure/cell_distribution.pdf',
width = 10,
height = 7)
ggplot(df, aes(x =  Sample, y = cell_num, fill = Cell_Type)) +
geom_bar(position = "fill", stat="identity") + ggtitle("Cell Number Distribution")
dev.off()
features <- c("Raf1", "Grk2", "Akt1", "Cdk1", "Csnk2b", "Mknk1", "Myd88", "Nfkbib", "Arhgdia", "Rac1", "Ripk1", "Stat2", "Tnfrsf1a", "Vav2", "Ywhaz", "Pdk1", "Trib3", "Dapp1", "Map2k3", "Mapk8", "Tbk1", "Ikbke", "Gsk3a", "Actr3", "Ap2m1", "Ptpn6")
DotPlot(seurat, features = features, cols = "RdBu") + RotatedAxis() + coord_flip()
pdf('Figure/mTOR_leadingedge_Dotplot.pdf',
width = 6,
height = 8)
DotPlot(seurat, features = features, cols = "RdBu") + RotatedAxis() + coord_flip()
dev.off()
DefaultAssay(seurat) <- "RNA"
# Prepare the normalized count matrix
# This count matrix is log transformed so we will need to use "Gaussian" distribution for GSVA
counts <- as.matrix(seurat@assays$RNA@data)
# convert gene identifiers to Entrez ID
suppressMessages(suppressWarnings(id_list <- read_csv("Data/mouse_symbol_Ensembl.csv")))
counts <- rownames_to_column(as.data.frame(counts), var = "gene_name")
counts <- inner_join(counts, id_list[,c(2:3)], by = c("gene_name" = "Marker Symbol"))
counts$gene_name <- NULL
non_duplicate_id <- which(duplicated(counts$"EntrezGene ID") == FALSE)
counts <- counts[non_duplicate_id,]
rownames(counts) <- counts$"EntrezGene ID"
counts$"EntrezGene ID" <- NULL
counts <- as.matrix(counts)
saveRDS(counts, "Data/counts.rds")
# Prepare the genesets
#load("Data/GeneSet/mouse_H_v5p2.rdata")
#load("Data/GeneSet/mouse_c2_v5p2.rdata")
#load("Data/GeneSet/mouse_c6_v5p2.rdata")
# filter the C2 genesets to only canonical pathways from BIOCARTA, KEGG, PID, and REACTOME
#Mm.c2.canonical <- Mm.c2[c(grep("^KEGG", names(Mm.c2)),
#+ grep("^REACTOME", names(Mm.c2)),
#+ grep("^BIOCARTA", names(Mm.c2)),
#+ grep("^PID", names(Mm.c2)))]
#save(Mm.c2.canonical, file = "Data/GeneSet/mouse_c2_canonical.rdata")
#load("Data/GeneSet/mouse_c2_canonical.rdata")
# concocanate a master list genesets that I want to test for
#Mm.gsva.master <- c(Mm.H, Mm.c2.canonical, Mm.c6)
#save(Mm.gsva.master, file = "Data/GeneSet/mouse_gsva_master.rdata")
load("Data/GeneSet/mouse_H_v5p2.rdata")
gsva_res <- t(readRDS("Results/gsva_out.rds"))
seurat@meta.data <- cbind(seurat@meta.data, gsva_res)
write_rds(seurat,
path = "Results/seurat_gsva.rds")
# creat a new annotation column for inflammatory monocytes and all other cells
seurat@meta.data$inf.monocyte <- "other cells"
seurat@meta.data$inf.monocyte[grep("Inflammatory Monocytes", seurat@meta.data$orig.annotation)] <- "Inflammatory Monocytes"
seurat@meta.data$inf.monocyte[grep("Neutrophil", seurat@meta.data$orig.annotation)] <- "Neutrophil"
view(seurat@meta.data)
Idents(object = seurat) <- "inf.monocyte"
# violin plot
VlnPlot(object = seurat,
features = c("HALLMARK_MTORC1_SIGNALING"),
pt.size = 0) + geom_boxplot(width = 0.1)
# violin plot
VlnPlot(object = seurat,
features = c("HALLMARK_MTORC1_SIGNALING"),
pt.size = 0) + geom_boxplot(width = 0.1)
NES <-  seurat@meta.data$HALLMARK_MTORC1_SIGNALING
NES_inf_mono <- NES[grep("Inflammatory Monocytes", seurat@meta.data$orig.annotation)]
NES_other <- NES[-grep("Inflammatory Monocytes", seurat@meta.data$orig.annotation)]
## check if NES is normally distributed
qqnorm(NES); qqline(NES)
## data is relatively normal, but I am using a non-parametric method here just to be safe
stats::wilcox.test(NES_inf_mono, NES_other, alternative = c("greater"), paired = FALSE)
# violin plot
VlnPlot(object = seurat,
features = c("HALLMARK_PI3K_AKT_MTOR_SIGNALING"),
pt.size = 0) + geom_boxplot(width = 0.1)
pdf('Figure/GSVA_PI3K_mTOR_violin.pdf',
width = 10,
height = 7)
VlnPlot(object = seurat,
features = c("HALLMARK_PI3K_AKT_MTOR_SIGNALING"),
pt.size = 0) + geom_boxplot(width = 0.1)
dev.off()
# Stats
NES <-  seurat@meta.data$HALLMARK_PI3K_AKT_MTOR_SIGNALING
NES_inf_mono <- NES[grep("Inflammatory Monocytes", seurat@meta.data$orig.annotation)]
NES_other <- NES[-grep("Inflammatory Monocytes", seurat@meta.data$orig.annotation)]
## check if NES is normally distributed
qqnorm(NES); qqline(NES)
## data is relatively normal, but I am using a non-parametric method here just to be safe
stats::wilcox.test(NES_inf_mono, NES_other, alternative = c("greater"), paired = FALSE)
NES_neutrophil <- NES[grep("Neutrophil", seurat@meta.data$orig.annotation)]
# Stats
NES <-  seurat@meta.data$HALLMARK_MTORC1_SIGNALING
NES_inf_mono <- NES[grep("Inflammatory Monocytes", seurat@meta.data$orig.annotation)]
NES_neutrophil <- NES[grep("Neutrophil", seurat@meta.data$orig.annotation)]
NES_other <- NES[grep("other cells", seurat@meta.data$orig.annotation)]
## check if NES is normally distributed
qqnorm(NES); qqline(NES)
## data is relatively normal, but I am using a non-parametric method here just to be safe
## Inflammatory monocyte vs background
stats::wilcox.test(NES_inf_mono, NES_other, alternative = c("greater"), paired = FALSE)
## data is relatively normal, but I am using a non-parametric method here just to be safe
## Inflammatory monocyte vs background
stats::wilcox.test(NES_inf_mono, NES_other, alternative = c("greater"), paired = FALSE)
NES_inf_mono <- NES[grep("Inflammatory Monocytes", seurat@meta.data$inf.monocyte)]
NES_neutrophil <- NES[grep("Neutrophil", seurat@meta.data$inf.monocyte)]
NES_other <- NES[grep("other cells", seurat@meta.data$inf.monocyte)]
## data is relatively normal, but I am using a non-parametric method here just to be safe
## Inflammatory monocyte vs background
stats::wilcox.test(NES_inf_mono, NES_other, alternative = c("greater"), paired = FALSE)
stats::wilcox.test(NES_neutrophil, NES_other, alternative = c("greater"), paired = FALSE)
VlnPlot(object = seurat,
features = c("HALLMARK_PI3K_AKT_MTOR_SIGNALING"),
pt.size = 0) + geom_boxplot(width = 0.1)
pdf('Figure/GSVA_PI3K_mTOR_violin.pdf',
width = 10,
height = 7)
VlnPlot(object = seurat,
features = c("HALLMARK_PI3K_AKT_MTOR_SIGNALING"),
pt.size = 0) + geom_boxplot(width = 0.1)
dev.off()
# Stats
NES <-  seurat@meta.data$HALLMARK_PI3K_AKT_MTOR_SIGNALING
NES_inf_mono <- NES[grep("Inflammatory Monocytes", seurat@meta.data$inf.monocyte)]
NES_neutrophil <- NES[grep("Neutrophil", seurat@meta.data$inf.monocyte)]
NES_other <- NES[grep("other cells", seurat@meta.data$inf.monocyte)]
## check if NES is normally distributed
qqnorm(NES); qqline(NES)
## data is relatively normal, but I am using a non-parametric method here just to be safe
## Inflammatory monocyte vs background
stats::wilcox.test(NES_inf_mono, NES_other, alternative = c("greater"), paired = FALSE)
stats::wilcox.test(NES_neutrophil, NES_other, alternative = c("greater"), paired = FALSE)
# Stats
sig.score_inf_mono <- sig.score[grep("Inflammatory Monocytes", seurat@meta.data$inf.monocyte)]
sig.score_neutrophil <- sig.score[grep("Neutrophil", seurat@meta.data$inf.monocyte)]
counts <- seurat@assays$RNA@counts
counts_df <- as.data.frame(counts)
gene_metadata <- as.data.frame(cbind(rownames(counts_df), rowMeans(counts_df), rowSums(!counts_df == 0)/dim(counts_df)[2]))
gene_metadata$V1 <- NULL
colnames(gene_metadata) <- c("mean_expression", "detection_freq")
# index the gene list of interest to get their coord on the 2-D space
gene_index <- match(features, rownames(gene_metadata))
# remove NA
gene_index <- gene_index[!is.na(gene_index)]
feature_df <- gene_metadata[gene_index,]
other_df <- gene_metadata[-gene_index,]
# find 10n nearest neighbor of these features in the background list
bg.gene <- nn2(other_df, feature_df, k = 10)
bg.gene.index <- unique(as.vector(bg.gene$nn.idx))
bg.gene.df <- other_df[bg.gene.index,]
# now we have the gene signature of interest and the background gene list
# signature score for each cell is the mean expression of the signature genes minus the mean expression of the background genes
bg.index <- match(rownames(bg.gene.df), rownames(counts_df))
sig.df <- counts_df[gene_index, ]
bg.df <- counts_df[bg.index,]
sig.score <- colMeans(sig.df) - colMeans(bg.df)
seurat@meta.data$"mTOR_leading_edge_sig_score" <- sig.score
write_rds(seurat,
path = "Results/seurat_gsva.rds")
FeaturePlot(object = seurat,
features = c("mTOR_leading_edge_sig_score"),
order = TRUE,
min.cutoff = 'q10',
label = FALSE,
repel = TRUE)
pdf('Figure/mTOR_leading_edge_signature.pdf',
width = 7,
height = 5)
FeaturePlot(object = seurat,
features = c("mTOR_leading_edge_sig_score"),
order = TRUE,
min.cutoff = 'q10',
label = FALSE,
repel = TRUE)
dev.off()
pdf('Figure/mTOR_leading_edge_signature_Voilin.pdf',
width = 10,
height = 7)
# violin plot
VlnPlot(object = seurat,
features = c("mTOR_leading_edge_sig_score"),
pt.size = 0) + geom_boxplot(width = 0.1)
dev.off()
# Stats
sig.score_inf_mono <- sig.score[grep("Inflammatory Monocytes", seurat@meta.data$inf.monocyte)]
sig.score_neutrophil <- sig.score[grep("Neutrophil", seurat@meta.data$inf.monocyte)]
sig.score_other <- sig.score[grep("other cells", seurat@meta.data$inf.monocyte)]
## check if sig.score is normally distributed
qqnorm(sig.score); qqline(sig.score)
## data is relatively normal, but I am using a non-parametric method here just to be safe
stats::wilcox.test(sig.score_inf_mono, sig.score_other, alternative = c("greater"), paired = FALSE)
stats::wilcox.test(sig.score_neutrophil, sig.score_other, alternative = c("greater"), paired = FALSE)
rmarkdown::render("SI CD45+ signaling pathway exploration.Rmd")
suppressMessages(
c(library(Seurat),
library(tidyverse),
library(Matrix),
library(RCurl),
library(scales),
library(cowplot),
library(SingleCellExperiment),
library(AnnotationHub),
library(ensembldb),
library(gridExtra))
)
seurat_data <- read.table("Data/Fig5E_Log2TPM.txt.gz", sep = "\t")
rownames(seurat_data) <- seurat_data[,1]
colnames(seurat_data) <- seurat_data[1,]
seurat_data <- seurat_data[,-1]
seurat_data <- seurat_data[-1,]
seurat_obj <- CreateSeuratObject(counts = seurat_data, min.features = 100)
# Add number of genes per UMI for each cell to metadata
seurat_obj$log10GenesPerUMI <- log10(seurat_obj$nFeature_RNA) / log10(seurat_obj$nCount_RNA)
# Compute percent mito ratio
seurat_obj$mitoRatio <- PercentageFeatureSet(object = seurat_obj, pattern = "^mt-")
seurat_obj$mitoRatio <- seurat_obj@meta.data$mitoRatio / 100
# Create metadata dataframe
metadata <- seurat_obj@meta.data
# Add cell IDs to metadata
metadata$cells <- rownames(metadata)
# Rename columns
metadata <- metadata %>%
dplyr::rename(seq_folder = orig.ident,
nUMI = nCount_RNA,
nGene = nFeature_RNA)
metadata <- separate(metadata, cells, c("barcode", "CD45", "genotype", "sample", "condition", "orig.annotation"), sep = "_", remove = FALSE, convert = TRUE)
metadata$CD45 <- NULL
# Add metadata back to Seurat object
seurat_obj@meta.data <- metadata
seurat <- subset(x = seurat_obj, subset = genotype == "MHCIIFlox", invert = FALSE)
devtools::install_version(package = 'Seurat', version = package_version('3.1.5'))
seurat <- subset(x = seurat_obj, subset = genotype == "MHCIIFlox", invert = FALSE)
devtools::install_version(package = 'Seurat', version = package_version('3.1.5'))
suppressMessages(
c(library(Seurat),
library(tidyverse),
library(Matrix),
library(RCurl),
library(scales),
library(cowplot),
library(SingleCellExperiment),
library(AnnotationHub),
library(ensembldb),
library(gridExtra))
)
sessioninfo()
sessionInfo()
devtools::install_version(package = 'Seurat', version = package_version('3.1.5'))
detach("package:Seurat", unload=TRUE)
suppressMessages(
c(library(Seurat),
library(tidyverse),
library(Matrix),
library(RCurl),
library(scales),
library(cowplot),
library(SingleCellExperiment),
library(AnnotationHub),
library(ensembldb),
library(gridExtra))
)
remove.packages("Seurat")
devtools::install_version(package = 'Seurat', version = package_version('3.1.5'))
suppressMessages(
c(library(Seurat),
library(tidyverse),
library(Matrix),
library(RCurl),
library(scales),
library(cowplot),
library(SingleCellExperiment),
library(AnnotationHub),
library(ensembldb),
library(gridExtra))
)
suppressMessages(
c(library(Seurat),
library(tidyverse),
library(Matrix),
library(RCurl),
library(scales),
library(cowplot),
library(SingleCellExperiment),
library(AnnotationHub),
library(ensembldb),
library(gridExtra))
)
sessionInfo()
seurat_data <- read.table("Data/Fig5E_Log2TPM.txt.gz", sep = "\t")
rownames(seurat_data) <- seurat_data[,1]
colnames(seurat_data) <- seurat_data[1,]
seurat_data <- seurat_data[,-1]
seurat_data <- seurat_data[-1,]
seurat_obj <- CreateSeuratObject(counts = seurat_data, min.features = 100)
# Add number of genes per UMI for each cell to metadata
seurat_obj$log10GenesPerUMI <- log10(seurat_obj$nFeature_RNA) / log10(seurat_obj$nCount_RNA)
# Compute percent mito ratio
seurat_obj$mitoRatio <- PercentageFeatureSet(object = seurat_obj, pattern = "^mt-")
seurat_obj$mitoRatio <- seurat_obj@meta.data$mitoRatio / 100
# Create metadata dataframe
metadata <- seurat_obj@meta.data
# Add cell IDs to metadata
metadata$cells <- rownames(metadata)
# Rename columns
metadata <- metadata %>%
dplyr::rename(seq_folder = orig.ident,
nUMI = nCount_RNA,
nGene = nFeature_RNA)
metadata <- separate(metadata, cells, c("barcode", "CD45", "genotype", "sample", "condition", "orig.annotation"), sep = "_", remove = FALSE, convert = TRUE)
metadata$CD45 <- NULL
# Add metadata back to Seurat object
seurat_obj@meta.data <- metadata
seurat <- subset(x = seurat_obj, subset = genotype == "MHCIIFlox", invert = FALSE)
